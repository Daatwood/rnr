{"version":3,"sources":["ResourceList.js","Menu.js","RobotJobs.js","App.js","reportWebVitals.js","index.js"],"names":["ResourceList","this","props","items","rates","Object","keys","length","map","name","rateInfo","toFixed","className","renderItems","Component","Menu","href","RobotJobs","robots","onClick","addJob","removeJob","free","renderJobs","App","state","time","resourceTypes","buildingTypes","robotTypes","crystalCooldownRate","itemStock","stockRate","stockLimit","buildings","scavenger","metallurgist","engineer","technician","tick","bind","buildStructure","calculateRates","setTimeout","Math","random","quarry","crystals","crystal","reactor","parts","setState","amt","stock","from","to","stockA","stockB","incrStock","kiln","scrapyard","harvestor","brickworks","smeltery","assembler","disintegrator","heat","scrap","minerals","bricks","metals","matter","building","cost","calculateBuildingCost","itemName","itemCost","values","count","reduce","sum","val","max","buildingLink","totalWorking","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2e92610.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ResourceList extends Component {\n\n  renderItems(){\n    const {items, rates} = this.props;\n    if(Object.keys(items).length === 0)\n      return null\n\n    return Object.keys(items).map( (name) => {\n      let rateInfo = '+'\n      if (rates[name])\n        rateInfo = `(${rates[name].toFixed(2)})`\n      return <li key={name} className='pure-menu=item'>{name}: {items[name].toFixed(2)} {!!rates[name] && rateInfo }</li>\n    })\n  }\n\n  render() {\n    return (\n      <ul className='pure-menu-list'>\n        {this.renderItems()}\n      </ul>\n    )\n  }\n}\nexport default ResourceList;","\nfunction Menu() {\n  return (\n    <div className=\"pure-menu pure-menu-horizontal pure-menu-scrollable\">\n      <a href=\"#\" className=\"pure-menu-link pure-menu-heading\"></a>\n      <ul className=\"pure-menu-list\">\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Scrapyard</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Science</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Workshop</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Arena</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Commerce</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Time</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Achievements</a>\n        </li>\n        <li className=\"pure-menu-item\">\n          <a href=\"#\" className=\"pure-menu-link\">Stats</a>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, { Component } from 'react';\n\nclass RobotJobs extends Component {\n\n  renderJobs(){\n    const {robots} = this.props;\n    if(Object.keys(robots).length === 0)\n      return null\n\n    return Object.keys(robots).map( (name) => {\n      return (\n        <p>\n          { name } {robots[name]}\n          <button onClick={() => this.props.addJob(name)}>+</button>\n          <button onClick={() => this.props.removeJob(name)}>-</button>\n        </p>\n      )\n    })\n  }\n\n  render() {\n    const {free} = this.props\n\n    return (\n      <ul className='pure-menu-list'>\n        <h2>Robots {free}</h2>\n        { this.renderJobs() }\n      </ul>\n    )\n  }\n}\nexport default RobotJobs;","import './App.css';\nimport React, { Component } from 'react';\n\nimport ResourceList from './ResourceList'\nimport Menu from './Menu'\nimport RobotJobs from './RobotJobs'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      time: 0,\n      resourceTypes: [\n        'heat',\n        'scrap',\n        'bricks',\n        'minerals',\n        'metals',\n        'parts',\n        'robots',\n        'matter',\n        'crystal'\n      ],\n      buildingTypes: [\n        'kiln',\n        'scrapyard',\n        'quarry',\n        'brickworks',\n        'harvestor',\n        'smeltery',\n        'assembler',\n        'disintegrator',\n        'reactor'\n      ],\n      robotTypes: [\n        'scavenger',\n        'engineer',\n        'metallurgist',\n        'technician'\n      ],\n      crystalCooldownRate: 0,\n      itemStock: {},\n      stockRate: {},\n      stockLimit: {},\n      buildings: {},\n      robots: {\n        scavenger: 0,\n        metallurgist: 0,\n        engineer: 0,\n        technician: 0,\n      },\n    }\n    this.tick = this.tick.bind(this);\n    this.buildStructure = this.buildStructure.bind(this);\n    this.calculateRates = this.calculateRates.bind(this);\n    this.addJob = this.addJob.bind(this);\n    this.removeJob = this.removeJob.bind(this);\n    this.buildStructure = this.buildStructure.bind(this);\n  }\n\n  componentDidMount() {\n    setTimeout(this.tick, 1000)\n  }\n\n  tick(){\n    let { itemStock, crystalCooldownRate } = this.state\n    const { stockRate } = this.state\n    Object.keys(stockRate).map((name) => {\n      if (!itemStock[name])\n        itemStock[name] = 0\n      itemStock[name] += stockRate[name]\n    });\n\n    // CHANCE to generate 1 based on number of quarries\n    if (Math.random() * this.state.buildings.quarry >= 42 + crystalCooldownRate) {\n      let crystals = (itemStock.crystal || 0)\n      itemStock.crystal = crystals + 1\n      crystalCooldownRate = 100\n    } else if (this.state.buildings.quarry >= 42) {\n      crystalCooldownRate -= 1\n      if (crystalCooldownRate < 1)\n        crystalCooldownRate = 0\n    }\n\n    // Generates a Robot given the right conditions\n    // 5 parts, 1 crystal, empty reactor spot\n    if ((itemStock.robots || 0) < this.state.buildings.reactor) {\n      if ( itemStock.parts >= 5 && itemStock.crystal >= 1) {\n        itemStock.parts -= 5;\n        itemStock.crystal -= 1;\n        if (!itemStock.robots)\n          itemStock.robots = 0\n        itemStock.robots += 1;\n      }\n    }\n\n    this.setState({\n      time: this.state ? this.state.time + 1 : 1,\n      itemStock: itemStock,\n      crystalCooldownRate: crystalCooldownRate\n    },() => setTimeout(this.tick, 1000));\n  }\n\n  incrStock(name, amt) {\n    let stock = this.state.itemStock[name] + amt\n    if (!stock && stock != 0)\n      stock = amt\n    this.setState({\n      itemStock: {\n        ...this.state.itemStock,\n        [name]: stock\n      }\n    })\n  }\n\n  decrStock(name, amt) {\n    let stock = this.state.itemStock[name] - amt\n    if (!stock && stock != 0)\n      stock = -amt\n    this.setState({\n      itemStock: {\n        ...this.state.itemStock,\n        [name]: stock\n      }\n    })\n  }\n\n  convertStock(from, amt, to) {\n    const stockA = this.state.itemStock[from] - amt || 0\n    const stockB = this.state.itemStock[to] + 1 || 1\n    this.setState({\n      itemStock: {\n        ...this.state.itemStock,\n        [from]: stockA,\n        [to]: stockB\n      }\n    });\n  }\n\n  onGenerateHeatButton() {\n    this.incrStock('heat',1)\n  }\n\n  // Thought? 1st building provides a base Rate\n  // Each additional buildings is an upgrade that increases by a percentage\n  // Robots give off heat \n  calculateRates(){\n    const { robots } = this.state.itemStock\n    const { kiln, scrapyard, harvestor, quarry, brickworks, smeltery, assembler, disintegrator } = this.state.buildings\n    const { scavenger, metallurgist, technician, engineer } = this.state.robots\n    this.setState({\n      stockRate:{\n        heat: ((robots || 0 ) * 0.02) + ((kiln || 0) * 0.68) - ((scrapyard || 0) * 0.08) - ((quarry || 0) * 0.05) - ((brickworks || 0) * 0.32) - ((smeltery || 0) * 0.75) - ((assembler || 0) * 1) - ((disintegrator || 0) * 2.5),\n        scrap: ((scrapyard || 0) * 0.24) - ((smeltery || 0) * 0.17) - ((harvestor || 0 ) * 0.13) + ((disintegrator || 0) * 0.33) + ((scavenger || 0) * 0.25),\n        minerals: ((quarry || 0 ) * 0.05) + ((harvestor || 0 ) * 0.17) - ((brickworks || 0) * 0.09) - ((smeltery || 0) * 0.09),\n        bricks: ((brickworks || 0 ) * 0.05),\n        metals: ((smeltery || 0 ) * 0.09) - ((assembler || 0) * 1.0) + ((metallurgist || 0) * 0.09),\n        parts: ((assembler || 0) * 0.03) - ((disintegrator || 0) * 0.035) + ((engineer || 0 ) * 0.03), \n        matter: ((disintegrator || 0) * 0.01) + ((technician || 0) * 0.01)\n      }\n    })\n  }\n\n  buildStructure(building){\n    const cost = this.calculateBuildingCost(building)\n    const itemName = Object.keys(cost)[0]\n    const itemCost = Object.values(cost)[0].toFixed(0)\n\n    if (this.state.itemStock[itemName] && this.state.itemStock[itemName] >= itemCost) {\n      const count = this.state.buildings[building] || 0;\n      this.setState({\n        itemStock:{\n          ...this.state.itemStock,\n          [itemName]: this.state.itemStock[itemName] - itemCost\n        },\n        buildings:{\n          ...this.state.buildings,\n          [building]: count + 1\n        }\n      }, this.calculateRates)\n    }\n  }\n\n  buildingLink(name) {\n    let cost = this.calculateBuildingCost(name)\n    \n    return <p key={name}><button onClick={() => this.buildStructure(name)}>{name} {this.state.buildings[name]} {Object.keys(cost)[0]}:{Object.values(cost)[0].toFixed(0)}</button></p>\n  }\n\n  totalWorking() {\n    return Object.values(this.state.robots).reduce((sum, val) => sum + val);\n  }\n\n  addJob(name) {\n    const jobs = Object.values(this.state.robots).reduce((sum, val) => sum + val);\n    const total = this.state.itemStock.robots \n    if (jobs < total) {\n      const count = this.state.robots[name] || 0;\n      this.setState({\n        robots:{\n          ...this.state.robots,\n          [name]: count + 1\n        }\n      }, this.calculateRates)\n    }\n  }\n\n  removeJob(name) {\n    const count = this.state.robots[name] || 0;\n    this.setState({\n      robots:{\n        ...this.state.robots,\n        [name]: Math.max(0, count - 1)\n      }\n    }, this.calculateRates)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"pure-g\">\n            <div className=\"pure-u-1\">\n              <h1>Robots and Resources</h1>\n              <small>Day {this.state.time}</small>\n              <Menu/>\n            </div>\n            <div className=\"pure-u-1-3\">\n              <h2>Resources</h2>\n              <p>\n                <button onClick={() => this.incrStock('heat', Math.random())}>Capture Heat</button>\n              </p>\n              <p>\n                <button onClick={() => this.incrStock('scrap', Math.random())}>Salvage</button>\n              </p>\n              <ResourceList items={this.state.itemStock} rates={this.state.stockRate}/>\n            </div>\n            <div className=\"pure-u-1-3\">\n              <h2>Buildings</h2>\n              { this.state.buildingTypes.map((name) => this.buildingLink(name) ) }\n            </div>\n            <div className=\"pure-u-1-3\">\n              <RobotJobs addJob={this.addJob} removeJob={this.removeJob} robots={this.state.robots} free={this.state.itemStock.robots - this.totalWorking() || ''} />\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  calculateBuildingCost(name){\n    const count = this.state.buildings[name] || 0\n    switch(name){\n      case 'kiln':\n        return {heat: 19 + 20 ** (4 * count / 100)} // 160019 at 100\n      case 'scrapyard':\n        return {scrap: 49+ 50 ** (25 * count / 137)}\n      case 'quarry':\n        return {heat: 49 + 50 ** (18 * count / 500)} \n      case 'brickworks':\n        return {minerals: 50 + (100 * count)}\n      default:\n        return {bricks: 1 + count}\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}